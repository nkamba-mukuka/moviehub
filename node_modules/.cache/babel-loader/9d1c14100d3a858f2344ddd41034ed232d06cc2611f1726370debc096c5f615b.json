{"ast":null,"code":"var _jsxFileName = \"/Users/mukukahnkambagmail.com/Desktop/movie/interview-coding-challenge/clientside/zig-movie-app/src/components/MovieList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieList = _ref => {\n  _s();\n  let {\n    searchQuery\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=336ce50989c7da4ec846349adc27407a&language=en-US&page=1`);\n        const data = await response.json();\n        const formattedMovies = data.results.map(movie => ({\n          id: movie.id,\n          title: movie.title,\n          poster: `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n        }));\n        setMovies(formattedMovies);\n      } catch (err) {\n        console.error('Failed to fetch movies:', err);\n      }\n    };\n    fetchMovies();\n  }, [searchQuery]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-grid\",\n    children: movies.map(movie => /*#__PURE__*/_jsxDEV(Link, {\n      to: `/movie/${movie.id}`,\n      className: \"movie-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: movie.poster,\n        alt: movie.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: movie.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(MovieList, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","Link","jsxDEV","_jsxDEV","MovieList","_ref","_s","searchQuery","movies","setMovies","fetchMovies","response","fetch","data","json","formattedMovies","results","map","movie","id","title","poster","poster_path","err","console","error","className","children","to","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mukukahnkambagmail.com/Desktop/movie/interview-coding-challenge/clientside/zig-movie-app/src/components/MovieList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface Movie {\n    id: number;\n    title: string;\n    poster: string;\n}\n\ninterface MovieListProps {\n    searchQuery?: string;\n}\n\nconst MovieList: React.FC<MovieListProps> = ({ searchQuery }) => {\n    const [movies, setMovies] = useState<Movie[]>([]);\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                const response = await fetch(\n                    `https://api.themoviedb.org/3/movie/popular?api_key=336ce50989c7da4ec846349adc27407a&language=en-US&page=1`\n                );\n                const data = await response.json();\n\n                const formattedMovies = data.results.map((movie: any) => ({\n                    id: movie.id,\n                    title: movie.title,\n                    poster: `https://image.tmdb.org/t/p/w500${movie.poster_path}`,\n                }));\n\n                setMovies(formattedMovies);\n            } catch (err) {\n                console.error('Failed to fetch movies:', err);\n            }\n        };\n\n        fetchMovies();\n    }, [searchQuery]);\n\n\n    return (\n        <div className=\"movie-grid\">\n            {movies.map(movie => (\n                <Link\n                    to={`/movie/${movie.id}`}\n                    key={movie.id}\n                    className=\"movie-card\"\n                >\n                    <img src={movie.poster} alt={movie.title} />\n                    <h3>{movie.title}</h3>\n                </Link>\n            ))}\n        </div>\n    );\n};\n\n\n\nexport default MovieList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAYxC,MAAMC,SAAmC,GAAGC,IAAA,IAAqB;EAAAC,EAAA;EAAA,IAApB;IAAEC;EAAY,CAAC,GAAAF,IAAA;EACxD,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAU,EAAE,CAAC;EACjDD,SAAS,CAAC,MAAM;IACZ,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,2GACJ,CAAC;QACD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,MAAMC,eAAe,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,KAAU,KAAM;UACtDC,EAAE,EAAED,KAAK,CAACC,EAAE;UACZC,KAAK,EAAEF,KAAK,CAACE,KAAK;UAClBC,MAAM,EAAE,kCAAkCH,KAAK,CAACI,WAAW;QAC/D,CAAC,CAAC,CAAC;QAEHb,SAAS,CAACM,eAAe,CAAC;MAC9B,CAAC,CAAC,OAAOQ,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MACjD;IACJ,CAAC;IAEDb,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;EAGjB,oBACIJ,OAAA;IAAKuB,SAAS,EAAC,YAAY;IAAAC,QAAA,EACtBnB,MAAM,CAACS,GAAG,CAACC,KAAK,iBACbf,OAAA,CAACF,IAAI;MACD2B,EAAE,EAAE,UAAUV,KAAK,CAACC,EAAE,EAAG;MAEzBO,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAEtBxB,OAAA;QAAK0B,GAAG,EAAEX,KAAK,CAACG,MAAO;QAACS,GAAG,EAAEZ,KAAK,CAACE;MAAM;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5C/B,OAAA;QAAAwB,QAAA,EAAKT,KAAK,CAACE;MAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA,GAJjBhB,KAAK,CAACC,EAAE;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKX,CACT;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC5B,EAAA,CAxCIF,SAAmC;AAAA+B,EAAA,GAAnC/B,SAAmC;AA4CzC,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}